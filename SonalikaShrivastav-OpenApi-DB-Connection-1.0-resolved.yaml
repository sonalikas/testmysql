openapi: 3.0.0
info:
  version: '1.0'
  title: OpenApi for Database connection
  description: The API for connecting MySql Database
  contact:
    name: sonalika shrivastav
    email: sonalika@cygniusconsulting.com
tags:
  - name: mysql
    description: create an test a connection with mysql
  - name: save mysqlDB
    description: save mySql database
  - name: run query 
    description: run a query on database
  - name: get statement
    description: save the output of query
    
servers:
  - url: https://api.mysqltest.com
    description: New Server 1
  - url: https://{hostname}:{port}/connect
    variables:
      hostname:
        default: localhost
      port:
        default: "3306"
    description: port number 
paths: 
    /TestConnection/mysql:
      description: Connection with mysql database
      post:
        description: try to connecting with mysql
        
        operationId: mysqlConnect
        requestBody:
          description: connected successfully
          required: true
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/mysqlConnectionParams'
        responses:
          2XX:
            description: All OK! (successfull)
          4XX:
            $ref: '#/components/responses/4XXResponse'
          5XX:
            $ref: '#/components/responses/5XXResponse'
    /saveConnection/mysql:
      description: Connection with mysql database
      post:
        description: try to connecting with mysql
        operationId: mysqlSave
        requestBody:
          description: connected successfully
          required: true
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/mysqlConnectionParams'
        responses:
          2XX:
            description: save (successfull)
            content:
              text/plain:
                schema:
                  type: string
                  example: XXXXXXXXXXXXX
          4XX:
            $ref: '#/components/responses/4XXResponse'
          5XX:
            $ref: '#/components/responses/5XXResponse'
    /mysql/createQueryException:
      description: run query with mysql database
      post:
        operationId: executeStatement
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/executeStatementParams'
                 
        responses:
          '2XX':
            description: uniquely identify queryRunID ( Run successfully)
            content:
              plain/text:
                schema:
                  type: string
                  example: sghj45cm
          '4XX':
            $ref: '#/components/responses/4XXResponse'
          '5XX':
            $ref: '#/components/responses/5XXResponse'
    /mysql/getQueryExecutionStatus:
      description: get result from query
      post:
        operationId: getStatement
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getQueryExecutionStatusSuccessResponse'
        responses:
          '2XX':
            description: status of response
            content:
              text/plain:
                schema:
                  oneOf:
                    - $ref: '#/components/schemas/getQueryExecutionStatusSuccessResponse'
                    - $ref: '#/components/schemas/getQueryExecutionStatusErrorResponse'
          '4XX':
            $ref: '#/components/responses/4XXResponse'
          '5XX':
            $ref: '#/components/responses/5XXResponse'
  
components:
  schemas:
    mysqlConnectionParams:
      type: object
      properties:
        databaseId:
          type: number
          description: unique key 
        serverHostname:
          type: string
          description: server name
          example: localhost
        port: 
          type: number
          description: port number
          default: 3306
        username:
          type: string
          description: user name
          example: admin
        password:
          type: string
          description: password
          example: root
        database:
          type: string
          description: database name
          example: test
      required:
        - server
        - port
        - username
        - password
        - database
      example:
        server: localhost
        port: 3306
        username: admin
        password: root
        database:  test
        
    errorMessageResponse:
      type: object
      description: Represents error messages
      properties:
        errorId:
          type: number
          description: unique error code
          example: 400,500
        error:
          type: string
          description: shows error message
        solution:
          type: string
          description:  probable solution 
    getQueryExecutionStatusErrorResponse:
      type: object
      description: Represents Error message
      properties:
        CreatedAt:
          type: number
        Database: 
          type: string
        DbUser: 
          type: string
        Duration: 
          type: number
        Error: 
          type: string
        HasResultSet: 
          type: boolean
        Id:  
          type: string
        QueryString:
          type: string
        ResultRows": 
          type: number
        ResultSize: 
          type: number
        Status: 
          type: string
        UpdatedAt: 
          type: number
    getQueryExecutionStatusSuccessResponse:
      type: object
      description: Represents success message
      properties:
        databaseErrorId:
          type: number
          description: unique error code by databse
        darabaseErrormessage:
          type: string
          description: shows error message by database
        cygniusErrorId:
          type: number
          description: unique error code
        cygniusErrormessage:
          type: string
          description: shows error message
        cygniusSolution:
          type: string
          description:  probable solution 
    executeStatementParams:
      type: object
      description: query parameters
      properties:
        databaseParams:
          $ref: '#/components/schemas/mysqlConnectionParams'
        query:
          type: string
          description: Query statement 
          example: slect * from tab;
        url:
          type: string
          description: Url query 

  responses:
    errorMessage:
      description: could not connect
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorMessageResponse'
    4XXResponse:
      description: client errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorMessageResponse'
    5XXResponse:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorMessageResponse'
